"""

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
numbers are all figurate (polygonal) numbers and are generated by the
following formulae:

Triangle                P3,n=n(n+1)/2           1, 3, 6, 10, 15, ...
Square                  P4,n=n^2                1, 4, 9, 16, 25, ...
Pentagonal              P5,n=n(3n-1)/2          1, 5, 12, 22, 35, ...
Hexagonal               P6,n=n(2n-1)            1, 6, 15, 28, 45, ...
Heptagonal              P7,n=n(5n-3)/2          1, 7, 18, 34, 55, ...
Octagonal               P8,n=n(3n-2)            1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

 1. The set is cyclic, in that the last two digits of each number is the first
    two digits of the next number (including the last number with the first).
 2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
    pentagonal (P5,44=2882), is represented by a different number in the set.
 3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for
which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the set.

"""


import time
import itertools


formulae = {
    3: lambda n: n*(n+1) // 2,
    4: lambda n: n*n,
    5: lambda n: n*(3*n-1) // 2,
    6: lambda n: n*(2*n-1),
    7: lambda n: n*(5*n-3) // 2,
    8: lambda n: n*(3*n-2),
    }

def make_polygonal_set(formula, digits=4):
    # assume monotonically ascending
    lwb, upb = int('1'+('0'*(digits-1))), int('9'*digits)
    for n in itertools.count(1):
        pn = formula(n)
        if pn > upb:
            return
        elif pn >= lwb:
            yield pn

polygonals = {}
def init_polygonals():
    for p, formula in formulae.items():
        polygonals[p] = list(make_polygonal_set(formula))


def find_chain(numbers, used):
    prefix = ''
    if numbers:
        prefix = str(numbers[-1])[-2:]
    if len(numbers) == 6 and str(numbers[0])[:2] == prefix:
        yield sum(numbers)
    for p, pset in polygonals.items():
        if p in used:
            continue
        for n in pset:
            if str(n).startswith(prefix):
                for solution in find_chain(numbers + [n], used + [p]):
                    yield solution
        if not prefix:
            break
            # to prevent all rotations


def solution(verbose=False):
    t0 = time.time()
    init_polygonals()
    t1 = time.time()
    if verbose:
        print("{}ms - make polygonal sets".format(
                int(1000*(t1-t0))))
    result = list(itertools.islice(find_chain([], []), 1))[0]
    t2 = time.time()
    if verbose:
        print("{}ms - chain: {}".format(
                int(1000*(t2-t1)),
                result))
        print("{}ms - total".format(
                int(1000*(t2-t0))))
    return result


if __name__ == '__main__':
    solution(verbose=True)
