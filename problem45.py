"""
Triangle, pentagonal, and hexagonal numbers are generated by the
following formulae:
    Triangle        Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
    Pentagonal      Pn=n(3n-1)/2     1, 5, 12, 22, 35, ...
    Hexagonal       Hn=n(2n-1)       1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""


import math
import itertools


def triangles():
    for n in itertools.count(1):
        yield n*(n+1)/2

def pentagonals():
    for n in itertools.count(1):
        yield n*(3*n-1)/2

def hexagonals():
    for n in itertools.count(1):
        yield n*(2*n-1)


def is_triangle(t):
    # n * (n+1) / 2 = t
    # quadratic equation: n^2 + n - 2t = 0  (a=1, b=1, c=-2t)
    # n = (-b +/- math.sqrt(b^2 - 4ac)) / 2a
    n = (-1 + math.sqrt(1 + 8*t)) / 2
    return n == int(n) and int(n)

def is_pentagonal(p):
    # p == n * (3*n-1) / 2, p in N, n in N, p>0, n>0
    # quadratic equation  ax^2 + bx + c = 0  ->  x = (-b +- sqrt(b^2-4ac)) / 2a
    # 3*n^2 - n - 2p == 0
    # a=3, b=-1, c=-2p  -> n = (1 + sqrt(1+24p)) / 6
    n = (1 + math.sqrt(1+24*p)) / 6
    return n==int(n) and int(n)

def is_hexagonal(h):
    # n*(2*n-1) = h
    # 2*n^2 - n - h = 0
    # a=2, b=-1, c=-h  -> n = (1 +/- math.sqrt(1-4*2*-h)) / 2*2
    n = (1 + math.sqrt(1+8*h)) / 4
    return n==int(n) and int(n)


def check(generator, tester, length=100, sample=[]):
    length = max(length, len(sample))
    generated = list(itertools.islice(generator(), length))
    filtered = filter(tester, range(1, generated[-1]+1))
    assert generated[:len(sample)] == sample
    assert generated == filtered



def solution(show_result=False):
    for i in hexagonals():
        # T(2n-1) = (2n-1)(2n-1+1)/2 = (2n-1)n = H(n)
        # so every hexagonal is also triangle, no need to test that.
        if is_pentagonal(i):
            if show_result:
                print 'T{0} = P{1} = H{2} = {3}'.format(
                        is_triangle(i), is_pentagonal(i), is_hexagonal(i), i)
            elif i > 40755:
                return i

if __name__=='__main__':
    check(triangles, is_triangle, sample=[1, 3, 6, 10, 15])
    check(pentagonals, is_pentagonal, sample=[1, 5, 12, 22, 35])
    check(hexagonals, is_hexagonal, sample=[1, 6, 15, 28, 45])
    print 'checks OK'
    print solution(show_result=True)
